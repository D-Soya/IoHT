from flask import Flask, render_template, jsonify, request, redirect, url_for
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user

import paho.mqtt.client as mqtt
import sqlite3
import os

from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, SubmitField

app = Flask(__name__, template_folder='templates', static_folder='static')
app.secret_key = '37bdb12360c37758e3984034a8f1b029e5fd414ce851a002'  # Replace with a secret key for session security
login_manager = LoginManager(app)
login_manager.login_view = 'login'

# Mock User class
class User(UserMixin):
    def __init__(self, user_id):
        self.id = user_id

    @property
    def is_active(self):
        return True  # Replace this with your actual logic for determining if the user is active

    @is_active.setter
    def is_active(self, value):
        # This setter is required by Flask-Login, but you can leave it empty
        pass

# Mock user data
users = {'test': {'password': 'test12'}}  # Replace with your actual user data

# User loader function
@login_manager.user_loader
def load_user(user_id):
    return User(user_id)

# Mock login route
class LoginForm(FlaskForm):
    username = StringField('Username')
    password = PasswordField('Password')
    submit = SubmitField('Log In')

@app.route('/login', methods=['GET', 'POST'])
def login():
    form = LoginForm()
    if form.validate_on_submit():
        # Replace with your actual authentication logic
        user_id = form.username.data
        user_data = users.get(user_id)

        if user_data and form.password.data == user_data['password']:
            user = load_user(user_id)
            login_user(user)
            return redirect(url_for('index'))

    return render_template('login.html', form=form)

# Logout route
@app.route('/logout')
@login_required
def logout():
    logout_user()
    return 'Logged out successfully'

# MQTT configuration
mqtt_server = "192.168.50.115"
mqtt_port = 1883
mqtt_user = "ioht"
mqtt_password = "kasper3600"
ultrasonic_topic = "ultrasonic"
dht_topic = "dht"

# SQLite database configuration
database_path = 'ioht_database.db'

def initialize_database():
    if not os.path.exists(database_path):
        connection = sqlite3.connect(database_path)
        cursor = connection.cursor()

        # Create the 'sensor_data' table
        cursor.execute('''
            CREATE TABLE sensor_data (
                distance REAL,
                temperature REAL,
                humidity REAL,
                timestamp TEXT DEFAULT (strftime('%Y-%m-%d %H:%M:%S', 'now', 'localtime'))
            )
        ''')

        connection.commit()
        connection.close()

def query_database():
    connection = sqlite3.connect(database_path)
    cursor = connection.cursor()

    cursor.execute("SELECT distance, temperature, humidity, timestamp FROM sensor_data ORDER BY timestamp DESC")
    result = cursor.fetchall()

    connection.close()

    return result

def update_data_from_database():
    db_data = query_database()
    if db_data:
        latest_data = db_data[0]
        data_from_mqtt.update({'distance': latest_data[0], 'temperature': latest_data[1], 'humidity': latest_data[2]})

def insert_data_into_database(distance, temperature, humidity):
    connection = sqlite3.connect(database_path)
    cursor = connection.cursor()

    cursor.execute("INSERT INTO sensor_data (distance, temperature, humidity) VALUES (?, ?, ?)",
                   (distance, temperature, humidity))

    connection.commit()
    connection.close()

def on_connect(client, userdata, flags, rc):
    print(f"Connected with result code {rc}")
    client.subscribe(ultrasonic_topic)
    client.subscribe(dht_topic)

def on_message(client, userdata, msg):
    global data_from_mqtt
    payload = msg.payload.decode()

    if msg.topic == ultrasonic_topic:
        distance = float(payload)
        data_from_mqtt['distance'] = distance
    elif msg.topic == dht_topic:
        temperature_parts = payload.split('Temperature:')
        humidity_parts = payload.split('Humidity:')
        
        if len(temperature_parts) > 1 and len(humidity_parts) > 1:
            try:
                temperature = float(temperature_parts[1].split(',')[0])
                humidity = float(humidity_parts[1])
                
                data_from_mqtt['temperature'] = temperature
                data_from_mqtt['humidity'] = humidity

                distance = data_from_mqtt['distance']
                insert_data_into_database(distance, temperature, humidity)
            except ValueError as e:
                print(f"Error converting values: {e}")

    print(f"Received message on topic {msg.topic}: {payload}")

client = mqtt.Client()
client.username_pw_set(mqtt_user, mqtt_password)
client.on_connect = on_connect
client.on_message = on_message

data_from_mqtt = {'distance': 0, 'temperature': 0, 'humidity': 0}

@app.route('/')
@login_required
def index():
    update_data_from_database()
    return render_template('index.html', data_from_mqtt=data_from_mqtt)

@app.route('/get_data')
def get_data():
    # Implementer logik for at hente data fra databasen og returnere det som JSON
    # ...

    return jsonify({
        'currentData': {
            'distance': data_from_mqtt['distance'],
            'temperature': data_from_mqtt['temperature'],
            'humidity': data_from_mqtt['humidity'],
        },
        'historicalData': query_database(),
    })

if __name__ == '__main__':
    initialize_database()
    client.connect(mqtt_server, mqtt_port, 60)
    client.loop_start()
    app.run(debug=True, host='127.0.0.1', port=5000, use_reloader=False)
