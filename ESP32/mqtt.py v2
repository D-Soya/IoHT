import machine
import network
import time
from umqtt.simple import MQTTClient
import dht

ssid = "Nikolaj"
password = "kode"
mqtt_server = "192.168.50.115"
mqtt_port = 1883
mqtt_user = "ioht"
mqtt_password = "kasper3600"
ultrasonic_topic = b"ultrasonic"
dht_topic = b"dht"

# Initialize WiFi
sta_if = network.WLAN(network.STA_IF)
sta_if.active(True)
sta_if.connect(ssid, password)

while not sta_if.isconnected():
    pass

print("Connected to WiFi")

# Callback function for handling MQTT messages
def on_message(topic, msg):
    print(f"Received message on topic {topic}: {msg}")

# Create an MQTT client instance
client = MQTTClient("sensor_client", mqtt_server, port=mqtt_port, user=mqtt_user, password=mqtt_password)
client.set_callback(on_message)

# Connect to the MQTT broker
client.connect()

# Subscribe to the specified topics
client.subscribe(ultrasonic_topic)
client.subscribe(dht_topic)

# Initialize ultrasonic sensor
trigger_pin = 4
echo_pin = 5
trigger = machine.Pin(trigger_pin, machine.Pin.OUT)
echo = machine.Pin(echo_pin, machine.Pin.IN)

# Initialize DHT11 sensor
dht_pin = 14  # Change this to the actual pin connected to your DHT11 sensor
dht_sensor = dht.DHT11(machine.Pin(dht_pin))

try:
    while True:
        # Ultrasonic sensor measurements
        trigger.value(1)
        time.sleep_us(10)
        trigger.value(0)

        while echo.value() == 0:
            signal_start = time.ticks_us()

        while echo.value() == 1:
            signal_end = time.ticks_us()

        signal_duration = time.ticks_diff(signal_end, signal_start)
        distance = (signal_duration * 0.0343) / 2

        print("Distance:", distance)
        client.publish(ultrasonic_topic, str(distance))

        # DHT11 sensor measurements
        dht_sensor.measure()
        temperature = dht_sensor.temperature()
        humidity = dht_sensor.humidity()

        print("Temperature:", temperature)
        print("Humidity:", humidity)

        client.publish(dht_topic, f"Temperature: {temperature}, Humidity: {humidity}")

        time.sleep(1)  # Adjust the sleep time to 2 seconds

except KeyboardInterrupt:
    print("Exiting...")
    client.disconnect()
